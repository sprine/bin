#!/bin/bash
#

# Read piped input into a variable
input=$(cat)

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
      --user) user_message="$2"; shift; shift ;;
      --system) system_message="$2"; shift; shift ;;
      --model) model="$2"; shift; shift ;;
      --temperature) temperature="$2"; shift; shift ;;
      --cost) cost="$2"; shift; shift ;;
      *) shift ;;
      esac
done

err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
}

# ensure that both the system and user message are not empty
if [ -z "$user_message" ]; then
  err "Please provide a prompt via the --user flag"
  exit 1
fi

if [ -z "$system_message" ]; then
  err "Please provide a system message using the --system flag"
  exit 1
fi

# Set default values for model and temperature
model=${model:-"gpt-4o-mini"}
temperature=${temperature:-0.1}
cost=${cost:-FALSE}

# Prepare data for the API request
data=$(jq -n \
        --arg sys "$system_message\n==\n$input" \
        --arg usr "$user_message" \
        --arg mdl "$model" \
        --argjson temp "$temperature" \
        '{model: $mdl, "temperature": $temp, messages:[{ role: "system", content: $sys}, {role: "user", content: $usr}]}')

# Make the API request
result=$(curl -X POST $OPENAI_API_BASE/v1/chat/completions \
    -H 'Content-Type: application/json' \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "$data")

message=$(echo $result | jq ".choices[0].message.content" | jq --raw-output)
cost=$(echo $result | jq -r '"$" + ( (.usage.prompt_tokens / 1000 * 0.01) + (.usage.completion_tokens / 1000 * 0.03) | tostring )')

echo "$message"

if [ "$cost" = "TRUE" ]; then
  echo -e "\n\033[1;30mCost estimate: $cost\033[0m"
fi
